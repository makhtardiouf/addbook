<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-16 at 23:38:30.
 */
require_once "model/Contact.php";

class ContactTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Contact
     */
    protected $contact;
    protected $chars; // for generating random string

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */

    protected function setUp() {
        $this->contact = new Contact;
        $this->chars = 'Abcde';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Contact::Save
     * 
     */
    public function testPersist() {
        $randStr = "Test " . str_shuffle($this->chars);
        $this->contact->setName($randStr);
        $this->contact->setFirstName(str_shuffle($this->chars));
        $this->contact->setStreet('street ' . rand());
        $this->contact->setCity('Lausanne');
        $this->contact->setZip(rand(100, 10 ^ 6));

        $stm = $this->contact->Persist();
        $this->assertNotEquals(false, $stm);
    }

    /**
     * 
     * @covers Contact::GetContact
     * 
     */
    public function testGetContact() {
        $this->contact = new Contact();
        $id = rand(1, 100);
        $row = $this->contact->GetContact($id, true);
        if (!$row) {
            echo "No contact with Id $id registered yet\n";
            $this->assertEmpty($row);
            return;
        } else {
            print_r($row);
            $this->assertArrayHasKey('name');
        }

        $row = $this->contact->GetContact(-1);
        $this->assertEmpty($row);
    }

    /**
     * @covers Contact::GetContacts
     * 
     */
    public function testGetContacts() {
        //$this->contact = new Contact();
        $stm = $this->contact->GetContacts();
        if (!$stm) {
            echo "No contacts recorded yet\n";
            return;
        }

        $this->assertGreaterThan(0, $stm->rowCount());
    }

    /**
     * @covers Contact::Delete
     * 
     */
    public function testDelete() {
        $this->testPersist();
        $db = new DbOp();
        $stm = $db->Query("SELECT * FROM " . TB_CONTACT . " ORDER BY Id DESC LIMIT 2");
        print_r($stm);
        // skip 1st row
        $stm->fetch();
        $row = $stm->fetch();
        $c = new Contact();
        $done = $c->Delete($row["Id"]);
        $this->assertEquals(true, $done);
    }

    /**
     * @covers Contact::ExportAllContacts
     * 
     */
    public function testExportAllContacts() {
        $arr = $this->contact->ExportAllContacts();
        $this->assertNotEmpty($arr);
        $this->assertArrayHasKey('rowcount', $arr);
        LogEcho("Removing xml file ".$arr['filename']);
        unlink($arr['filename']);
    }

    /**
     * @covers Contact::getId
     * 
     */
    public function testGetId() {
        //  $this->contact = new Contact();
        $row = $this->contact->GetContact(1);
        if ($row)
            $this->assertGreaterThan(0, $row["Id"]);
    }

    /**
     * @covers Contact::getName
     * 
     */
    public function testGetName() {
        //  $this->contact = new Contact();
        $this->contact = $this->contact->GetContact(1);
        print_r($this->contact);
        if ($this->contact)
            $this->assertNotEmpty($this->contact['name']);
    }

    /**
     * @covers Contact::getFirstName
     * 
     */
    public function testGetFirstName() {
        $this->contact = $this->contact->GetContact(1);
        $ret = $this->contact['first_name'];
        print_r($ret);
        if ($ret)
            $this->assertNotEmpty($ret);
    }

    /**
     * @covers Contact::getCity
     * 
     */
    public function testGetCity() {
        $this->contact = $this->contact->GetContact(1);
        $ret = $this->contact['city'];
        print_r($ret);
        if ($ret)
            $this->assertNotEmpty($ret);
    }

    /**
     * @covers Contact::getZip
     * 
     */
    public function testGetZip() {
        $this->contact = $this->contact->GetContact(1, true);
        $ret = $this->contact['zip_code'];
        print_r($ret);
        $this->assertGreaterThanOrEqual(0, $ret);
    }

}
